@page "/"
@inject HttpClient Http
@inject IJSRuntime JS
@using System.Net.Http.Json
@using Blazored.LocalStorage
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@rendermode InteractiveServer
<PageTitle>Login</PageTitle>

@* { *@
@*   "email": "patrik@ukdw.com", *@
@*   "userName": "patrikukdw", *@
@*   "password": "@Patrik123", *@
@*   "fullName": "Patrik Kurniawan Saputra" *@
@* } *@

<div class="container" style="margin: 10px 10px 50px 50px">
    <div class="row justify-content-center">
        <div class="col-md-4">
            <h2 class="text-center mb-4">Login</h2>
            <div>
                <label for="email" class="form-label">Email</label>
                <input type="email" id="email" class="form-control" @bind="email" placeholder="Enter your email" />
            </div>
            <div class="mt-3">
                <label for="password" class="form-label">Password</label>
                <input type="password" id="password" class="form-control" @bind="password" placeholder="Enter your password" />
            </div>
            <div class="mt-4 text-center">
                <button class="btn btn-primary" @onclick="HandleLogin">Login</button>
            </div>
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-3">
                    @errorMessage
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string email = string.Empty;
    private string password = string.Empty;
    private string errorMessage = string.Empty;

    private async Task HandleLogin()
    {
        errorMessage = string.Empty;

        if (string.IsNullOrWhiteSpace(email) || string.IsNullOrWhiteSpace(password))
        {
            errorMessage = "Please fill in both fields.";
            return;
        }

        try
        {
            var loginData = new { userName = email, password = password };
            var response = await Http.PostAsJsonAsync("https://actbackendseervices.azurewebsites.net/api/login", loginData);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                var token = result?.Token;

                if (!string.IsNullOrEmpty(token))
                {
                    // Store token in localStorage
                    await JS.InvokeVoidAsync("localStorage.setItem", "authToken", token);
                    Console.WriteLine($"Token stored: {token}");

                    // Redirect to home page
                    NavigationManager.NavigateTo("/home");
                }
                else
                {
                    errorMessage = "Invalid token received.";
                }
            }
            else
            {
                errorMessage = "Invalid email or password.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private class LoginResponse
    {
        public string Token { get; set; }
    }
}
